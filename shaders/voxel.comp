//GLSL version to use
#version 450

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(binding = 0, rgba16f) uniform writeonly image2D image;

layout(binding = 1, r8ui) uniform readonly uimage3D voxelData;

layout(binding = 2, std430) buffer PaletteData {
    uint palette[];
};

layout(binding = 3, std140) uniform UniformBufferObject {
    vec3 position;
    vec3 forward;
    vec3 right;
    vec3 up;

    float fov;
    float time;
};

struct RayHit {
    bool isHit;
    vec3 pos;
    vec3 normal;
    vec3 color;
    ivec3 voxel;
};

const float EPSILON = 1e-3;
const uint MAX_STEPS = 256;
const uint SAMPLES_PER_PIXEL = 4;

vec4 unpackColor(uint packed)
{
    return vec4(
        float((packed >>  0) & 0xFF) / 255.0,
        float((packed >>  8) & 0xFF) / 255.0,
        float((packed >> 16) & 0xFF) / 255.0,
        float((packed >> 24) & 0xFF) / 255.0
    );
}

float hash1(inout float seed) {
    return fract(sin(seed += 0.1)*43758.5453123);
}

vec2 hash2(inout float seed) {
    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));
}

vec3 hash3(inout float seed) {
    return fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));
}

RayHit intersectVoxel(vec3 ro, vec3 rd)
{
    RayHit hit;

    hit.isHit = false;

    hit.voxel = ivec3(floor(ro));

    ivec3 step = ivec3(sign(rd));

    vec3 tDelta = abs(vec3(length(rd)) / rd);
    vec3 nextBoundary = vec3(hit.voxel) + vec3(greaterThan(rd, vec3(0.0)));
    vec3 tMax = (nextBoundary - ro) / rd;

    for (int i = 0; i < MAX_STEPS; ++i) {
        uint index = imageLoad(voxelData, hit.voxel).r;

        if(index > 0)
        {
            hit.pos = ro + rd * tMax;
            hit.color = unpackColor(palette[index - 1]).xyz;
            hit.isHit = true;
            return hit;
        }

        if (tMax.x < tMax.y && tMax.x < tMax.z) {
            hit.voxel.x += step.x;
            tMax.x += tDelta.x;
            hit.normal = vec3(-step.x, 0, 0);
        } else if (tMax.y < tMax.z) {
            hit.voxel.y += step.y;
            tMax.y += tDelta.y;
            hit.normal = vec3(0, -step.y, 0);
        } else {
            hit.voxel.z += step.z;
            tMax.z += tDelta.z;
            hit.normal = vec3(0, 0, -step.z);
        }
    }

    return hit;
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(image);

    float aspectRatio = float(imageSize.x) / float(imageSize.y);

    if(pixelCoord.x >= imageSize.x || pixelCoord.y >= imageSize.y)
        return;

    vec3 color = vec3(0.0);

    float seed = pixelCoord.x + pixelCoord.y * 3.43121412313;

    RayHit hit;

    for(int i = 0; i < SAMPLES_PER_PIXEL; i++)
    {
        // Fixed offset multisampling -- Can only be used for 2x2
        vec2 uv = (vec2(pixelCoord) + vec2(0.25 + max(1, i * 0.5), 0.25 + min(0, i*0.5))) / imageSize;

        // Random offset multisampling
        // vec2 offset = vec2(hash2(seed) - 0.5);
        // vec2 uv = (vec2(pixelCoord) + offset) / imageSize;

        uv = uv * 2.0 - 1.0;
        uv.x *= aspectRatio;

        vec3 rayDir = normalize(
            forward +
            uv.x * tan(radians(fov) * 0.5) * right +
            uv.y * tan(radians(fov) * 0.5) * -up
        );

        vec3 rayOrigin = position;
        rayOrigin += rayDir * EPSILON; // Nudge forward to avoid self-intersection

        hit = intersectVoxel(rayOrigin, rayDir);

        if(hit.isHit)
        {
            color += hit.color;
        } else {
            // Sky gradient -- Uncomment if use
            float a = 0.5 * (rayDir.y + 1);
            vec3 aColor = {1.0, 1.0, 1.0};
            vec3 bColor = {0.5, 0.7, 1.0};
            color.xyz += aColor + (bColor - aColor) * a;
        }
    }

    // Calculate color
    color = color / float(SAMPLES_PER_PIXEL);

    imageStore(image, pixelCoord, vec4(color, 1.0));
}
