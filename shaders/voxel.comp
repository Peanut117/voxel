//GLSL version to use
#version 450

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(binding = 0, rgba16f) uniform writeonly image2D image;

layout(binding = 1, std430) buffer voxelDataBuffer {
    uint voxelData[];
};

layout(binding = 2, std430) buffer PaletteData {
    uint palette[];
};

layout(binding = 3, std140) uniform UniformBufferObject {
    vec3 eye;
    vec3 forward;
    vec3 right;
    vec3 up;

    float fov;
    float time;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct RayHitInternal {
    vec3 pos;
    vec3 sideDist;
    vec3 tDelta;
    ivec3 step;
    uint material;
    bvec3 mask;
};

struct RayHit{
    uint material;
    vec3 pos;
    vec3 normal;
    vec3 dir;
};

struct Material {
    vec4 color;
};

ivec3 gridSize = ivec3(256);
vec2 imageSize = imageSize(image);

const float EPSILON = 1e-4;
const uint MAX_STEPS = 512;
const uint MAX_BOUNCES = 2;

const vec3 LIGHT_DIR = normalize(vec3(-5.0, 5.0, -3));
const vec3 LIGHT_COLOR = vec3(1.0);
const float LIGHT_INTENSITY = 1.0;

float seed = time + gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * 3.43121412313;

Ray InitCamera(inout vec2 uv)
{
    float aspectRatio = float(imageSize.x) / float(imageSize.y);

    uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) / imageSize;
    uv = uv * 2.0 - 1.0;
    uv.x *= aspectRatio;

    Ray ray;

    ray.direction = normalize(
        forward +
        uv.x * tan(radians(fov) * 0.5) * right +
        uv.y * tan(radians(fov) * 0.5) * -up
    );

    ray.origin = eye;

    return ray;

}

vec4 unpackColor(uint packed)
{
    return vec4(
        float((packed >>  0) & 0xFF) / 255.0,
        float((packed >>  8) & 0xFF) / 255.0,
        float((packed >> 16) & 0xFF) / 255.0,
        float((packed >> 24) & 0xFF) / 255.0
    );
}

uint idx(vec3 voxel)
{
    return uint(
        voxel.x + 
        voxel.y * 256 + 
        voxel.z * 256*256
    );
}

uint unpackVoxelData(vec3 voxel)
{
    uint index = idx(voxel);

    uint uintIndex = index/4;
    uint uintOffset = index%4;

    return uint((voxelData[uintIndex] >> (uintOffset * 8)) & 0xFF);
}

float hash1() {
    return fract(sin(seed += 0.1)*43758.5453123);
}

vec2 hash2() {
    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));
}

vec3 hash3() {
    return fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));
}

vec3 hashOnNormal(in vec3 normal) {
    vec3 onNormal = hash3();
    return reflect(onNormal, normal);
}

vec3 boxIntersection(Ray ray) {
    vec3 invDir = 1.0 / ray.direction;

    vec3 t1 = (-ray.origin) * invDir;
    vec3 t2 = (vec3(gridSize) - ray.origin) * invDir;
    vec3 tminDir = min(t1, t2);
    vec3 tmaxDir = max(t1, t2);

    float tmin = max(tminDir.x, max(tminDir.y, tminDir.z));
    float tmax = min(tmaxDir.x, min(tmaxDir.y, tmaxDir.z));

    if (tmin >= 0 && tmax >= tmin) {
        return ray.origin + (tmin + 0.1) * ray.direction;
    } else {
        return ray.origin;
    }
}

RayHitInternal traceRayInternal(Ray ray)
{
    RayHitInternal result;
    result.material = 0;

    result.pos = boxIntersection(ray);
    ivec3 voxel = ivec3(floor(result.pos));

    result.step = ivec3(sign(ray.direction));
    result.tDelta = abs(1.0 / ray.direction);
    result.sideDist = (sign(ray.direction) * (vec3(voxel) - result.pos) + (sign(ray.direction) * 0.5) + 0.5) * result.tDelta;

    for(uint i = 0; i < MAX_STEPS; i++)
    {
        if (voxel.x < 0 || voxel.x >= gridSize.x
        ||  voxel.y < 0 || voxel.y >=  gridSize.y
        ||  voxel.z < 0 || voxel.z >=  gridSize.z)
        {
            break;
        }

        result.material = unpackVoxelData(voxel);
        if(result.material != 0)
        {
            break;
        }

        result.mask = lessThanEqual(result.sideDist.xyz, min(result.sideDist.yzx, result.sideDist.zxy));

        result.sideDist += vec3(result.mask) * result.tDelta;

        voxel += ivec3(vec3(result.mask)) * result.step;
    }

    return result;
}

RayHit traceRay(Ray ray)
{
    RayHitInternal internal = traceRayInternal(ray);

    RayHit result;
    result.material = internal.material;
    result.dir = ray.direction;

    if(result.material != 0)
    {
        result.normal = normalize(vec3(internal.mask) * -vec3(internal.step));
        
        float d = length(vec3(internal.mask) * (internal.sideDist - internal.tDelta));
        result.pos = internal.pos + d * ray.direction;
    }

    return result;
}

bool traceRayHit(Ray ray)
{
    RayHitInternal internal = traceRayInternal(ray);
    return internal.material != 0;
}

bool isShadowed(RayHit hit)
{
    return traceRayHit(Ray(hit.pos + hit.normal * EPSILON, LIGHT_DIR));
}

Material unpackMaterials(uint material)
{
    Material result;
    result.color = unpackColor(palette[material-1]);
    return result;
}

vec3 skyHit(in Ray ray)
{
    const float SC = 1e5;

 	// Calculate sky plane
    float dist = (SC - ray.origin.y) / ray.direction.y; 
    vec2 p = (ray.origin + dist * ray.direction).xz;
    p *= 1.2 / SC;
    
    // fray.originm iq's shader, https://www.shadertoy.com/view/MdX3Rr
    float sundot = clamp(dot(ray.direction, LIGHT_DIR), 0.0, 1.0);
    
    vec3 cloudCol = vec3(1.);
    //vec3 skyCol = vec3(.6, .71, .85) - ray.direction.y * .2 * vec3(1., .5, 1.) + .15 * .5;
    vec3 skyCol = vec3(0.3,0.5,0.85) - ray.direction.y*ray.direction.y*0.5;
    skyCol = mix( skyCol, 0.85 * vec3(0.7,0.75,0.85), pow( 1.0 - max(ray.direction.y, 0.0), 4.0 ) );
    
    // sun
    vec3 sun = 0.25 * vec3(1.0,0.7,0.4) * pow( sundot,5.0 );
    sun += 0.25 * vec3(1.0,0.8,0.6) * pow( sundot,64.0 );
    sun += 0.2 * vec3(1.0,0.8,0.6) * pow( sundot,512.0 );
    skyCol += sun;
    
    // horizon
    skyCol = mix( skyCol, 0.68 * vec3(.418, .394, .372), pow( 1.0 - max(ray.direction.y, 0.0), 16.0 ) );
    
    return skyCol;
}

// vec3 skyHit(vec3 rayDir)
// {
//     float a = 0.5 * (rayDir.y + 1);
//     vec3 aColor = {1.0, 1.0, 1.0};
//     vec3 bColor = {0.5, 0.7, 1.0};
//     return aColor + (bColor - aColor) * a;
// }

vec3 colorHit(RayHit hit, uint depth)
{
    Material material = unpackMaterials(hit.material);
    bool isShadow = isShadowed(hit);

    if(hit.material == 0)
    {
        return skyHit(Ray(hit.pos, hit.dir));
    }

    vec3 ambient = vec3(0.3);
    vec3 diffuse = vec3(0.0);
    if(!isShadow)
    {
        float diff = max(dot(hit.normal, LIGHT_DIR), 0.0);
        diffuse = diff * LIGHT_COLOR * LIGHT_INTENSITY;
    }

    return ((diffuse + ambient) * material.color.rgb) * 1.0 / float(depth+1);
}

vec3 colorRay(RayHit hit)
{
    // vec3 diffuse = vec3(0.0);

    // for(int i = 0; i < MAX_BOUNCES; i++)
    // {
    //     // vec3 diffuseDir = reflect(hit.dir, hit.normal);
    //     vec3 diffuseDir = hit.normal + hashOnNormal(seed, hit.normal);
    //     RayHit diffuseHit = traceRay(Ray(hit.pos + hit.normal * EPSILON, diffuseDir));
    //
    //     // if(diffuseHit.material == 0)
    //     // {
    //     //     break;
    //     // }
    //
    //     diffuse += colorHit(diffuseHit, diffuse, MAX_BOUNCES);
    // }
    //
    // diffuse /= MAX_BOUNCES;

    return colorHit(hit, 0);
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);

    if (pixelCoord.x >= imageSize.x || pixelCoord.y >= imageSize.y)
        return;

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

    vec2 uv;
    Ray cam = InitCamera(uv);

    RayHit hit = traceRay(cam);

    if(hit.material != 0)
    {
        color.rgb = colorRay(hit);
    }
    else
    {
        color.rgb = skyHit(cam);
    }

    imageStore(image, pixelCoord, color);
}
