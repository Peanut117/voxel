//GLSL version to use
#version 460

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(rgba16f,set = 0, binding = 0) uniform image2D image;

layout(set = 0, binding = 1) uniform UniformBufferObject {
    float time;
    mat4 hi;
    mat4 bufferbuffer;
} ubo;

const int MAX_RAY_STEPS = 128;

const float PI = 3.14159265359;

const vec3 CAM_POS = {0.0, 0.0, 0.0};

const ivec3 VOXEL = {0, 0, -9};

float cosRange(float amt, float range, float minimum) {
	return (((1.0 + cos(radians(amt))) * 0.5) * range) + minimum;
}

void main()
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(image);

    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

    const int zoom = 40;
    const float brightness = 0.975;
	float time = ubo.time * 1.25;
	vec2 uv = texelCoord.xy / size.xy;
	vec2 p  = (2.0*texelCoord.xy-size.xy)/max(size.x,size.y);
	float ct = cosRange(time*5.0, 3.0, 1.1);
	float xBoost = cosRange(time*0.2, 5.0, 5.0);
	float yBoost = cosRange(time*0.1, 10.0, 5.0);
	float fScale = cosRange(time * 15.5, 1.25, 0.5);
	
	for(int i=1;i<zoom;i++) {
		float _i = float(i);
		vec2 newp=p;
		newp.x+=0.25/_i*sin(_i*p.y+time*cos(ct)*0.5/20.0+0.005*_i)*fScale+xBoost;		
		newp.y+=0.25/_i*sin(_i*p.x+time*ct*0.3/40.0+0.03*float(i+15))*fScale+yBoost;
		p=newp;
	}
	
	vec3 col=vec3(0.5*sin(3.0*p.x)+0.5,0.5*sin(3.0*p.y)+0.5,sin(p.x+p.y));
	col *= brightness;
    
    // Add border
    float vigAmt = 5.0;
    float vignette = (1.-vigAmt*(uv.y-.5)*(uv.y-.5))*(1.-vigAmt*(uv.x-.5)*(uv.x-.5));
	float extrusion = (col.x + col.y + col.z) / 4.0;
    extrusion *= 1.5;
    extrusion *= vignette;
    
	color = vec4(col, extrusion);

    imageStore(image, texelCoord, color);
}

// void main() 
// {
//     ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
//     ivec2 size = imageSize(image);
//
//     vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
//
//     float aspectRatio = float(size.x) / size.y;
//     const float fov = 90.0;
//     float viewportWidth = 2 * aspectRatio;
//     float Px = (2 * ((texelCoord.x + 0.5) / (size.x)) - 1) * aspectRatio;
//     float Py = (1 - 2 * (texelCoord.y + 0.5) / size.y);
//     const vec3 rayOrigin = CAM_POS;
//     vec3 rayDir = vec3(Px, Py, -1) - rayOrigin;
//     rayDir = normalize(rayDir);
//
//     // Ik weet niet of deze cast werkt
//     ivec3 currentVoxel = ivec3(floor(rayOrigin));
//     ivec3 step = ivec3(sign(rayDir));
//
//     vec3 nextVoxelBoundary = currentVoxel + step;
//
//     // Could check if it can't be infinity
//     vec3 tMax = (nextVoxelBoundary - rayOrigin) / rayDir;
//     vec3 tDelta = step / rayDir;
//
//     for(int i = 0; i < MAX_RAY_STEPS; i++){
//         // DO
//         if(currentVoxel == VOXEL)
//         {
//             // color = vec4((ubo.time), 0.0, 0.0, 1.0);
//             color = vec4((ubo.time), 0.0, 0.0, 1.0);
//             imageStore(image, texelCoord, color);
//             return;
//         }
//
//         // Calc
//         if(tMax.x < tMax.y)
//         {
//             if(tMax.x < tMax.z)
//             {
//                 // X-axis
//                 currentVoxel.x += step.x;
//                 tMax.x += tDelta.x;
//             } else {
//                 // Z-axis
//                 currentVoxel.z += step.z;
//                 tMax.z += tDelta.z;
//             }
//         } else {
//             if(tMax.y < tMax.z)
//             {
//                 // Y-axis
//                 currentVoxel.y += step.y;
//                 tMax.y += tDelta.y;
//             } else {
//                 // Z-axis
//                 currentVoxel.z += step.z;
//                 tMax.z += tDelta.z;
//             }
//         }
//     }
//
//     float a = 0.5 * (rayDir.y + 1);
//
//     vec3 aColor = {1.0, 1.0, 1.0};
//     vec3 bColor = {0.5, 0.7, 1.0};
//     color.xyz = aColor + (bColor - aColor) * a;
//
//     imageStore(image, texelCoord, color);
// }
//
