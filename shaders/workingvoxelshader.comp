//GLSL version to use
#version 450

//size of a workgroup for compute
layout (local_size_x = 16, local_size_y = 16) in;

//descriptor bindings for the pipeline
layout(binding = 0, rgba16f) uniform writeonly image2D image;

layout(binding = 1, r8ui) uniform readonly uimage3D voxelData;

layout(binding = 2, std430) buffer PaletteData {
    uint palette[];
};

layout(binding = 3, std140) uniform UniformBufferObject {
    vec3 position;
    vec3 forward;
    vec3 right;
    vec3 up;

    float fov;
    float time;
};

struct RayHit {
    vec3 pos;
    ivec3 voxel;
    uint material;
};

const float EPSILON = 1e-3;

vec3 estimateNormal(ivec3 p) {
    ivec3 size = imageSize(voxelData);
    vec3 normal = vec3(
        imageLoad(voxelData, clamp(p + ivec3(1,0,0), ivec3(0), size-ivec3(1))).r -
        imageLoad(voxelData, clamp(p - ivec3(1,0,0), ivec3(0), size-ivec3(1))).r,
        imageLoad(voxelData, clamp(p + ivec3(0,1,0), ivec3(0), size-ivec3(1))).r -
        imageLoad(voxelData, clamp(p - ivec3(0,1,0), ivec3(0), size-ivec3(1))).r,
        imageLoad(voxelData, clamp(p + ivec3(0,0,1), ivec3(0), size-ivec3(1))).r -
        imageLoad(voxelData, clamp(p - ivec3(0,0,1), ivec3(0), size-ivec3(1))).r
    );
    return normalize(normal);
}

vec4 unpackColor(uint packed) {
    return vec4(
        float((packed >>  0) & 0xFF) / 255.0,
        float((packed >>  8) & 0xFF) / 255.0,
        float((packed >> 16) & 0xFF) / 255.0,
        float((packed >> 24) & 0xFF) / 255.0
    );
}

RayHit intersectVoxel(vec3 ro, vec3 rd)
{
    RayHit hit;
    hit.material = 0;

    hit.voxel = ivec3(floor(ro));
    ivec3 step = ivec3(sign(rd));

    vec3 tDelta = abs(1.0 / rd);
    vec3 nextBoundary = vec3(hit.voxel) + vec3(greaterThan(rd, vec3(0.0)));
    vec3 tMax = (nextBoundary - ro) / rd;

    for (int i = 0; i < 256; ++i) {
        hit.material = imageLoad(voxelData, hit.voxel).r;

        if(hit.material > 0)
        {
            hit.pos = ro + rd * tMax;
            return hit;
        }

        if (tMax.x < tMax.y && tMax.x < tMax.z) {
            hit.voxel.x += step.x;
            tMax.x += tDelta.x;
        } else if (tMax.y < tMax.z) {
            hit.voxel.y += step.y;
            tMax.y += tDelta.y;
        } else {
            hit.voxel.z += step.z;
            tMax.z += tDelta.z;
        }
    }

    return hit;
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imageSize = imageSize(image);

    float aspectRatio = float(imageSize.x) / float(imageSize.y);

    if(pixelCoord.x >= imageSize.x || pixelCoord.y >= imageSize.y)
        return;

    // Convert pixel coord to NDC
    vec2 uv = (vec2(gl_GlobalInvocationID.xy) + 0.5) / imageSize;
    uv = uv * 2.0 - 1.0;
    uv.x *= aspectRatio;

    vec3 rayDir = normalize(
        forward +
        uv.x * tan(radians(fov) * 0.5) * right +
        uv.y * tan(radians(fov) * 0.5) * -up
    );

    vec3 rayOrigin = position;
    rayOrigin += rayDir * EPSILON; // Nudge forward to avoid self-intersection

    bool t;
    vec4 color = vec4(0.0);

    vec3 rayPos;
    RayHit hit = intersectVoxel(rayOrigin, rayDir);

    if (hit.material > 0) {
        uint packedColor = palette[hit.material - 1];
        color = unpackColor(packedColor);
        imageStore(image, pixelCoord, color);
    } else if(time > 0) {
        float a = 0.5 * (rayDir.y + 1);
        vec3 aColor = {1.0, 1.0, 1.0};
        vec3 bColor = {0.5, 0.7, 1.0};
        color.xyz = aColor + (bColor - aColor) * a;
        imageStore(image, pixelCoord, color);
    } else {
        imageStore(image, pixelCoord, color);
    }
}
